WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }

program = {
    SOI ~
    (statement ~ ";")* ~
    EOI
}
statement = { assignment | destruct_pair| witness_decl |  func_call }
witness_decl = _{ "let" ~ witness}

identifier        = @{ !(reserved) ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
variable_pattern  =  { identifier }
ignore_pattern    =  { "_" }
product_pattern   =  { "(" ~ pattern ~ "," ~ pattern ~ ")" }
pattern           =  { variable_pattern | ignore_pattern | product_pattern }
assignment        =  { "let" ~ pattern ~ (":" ~ ty)? ~ "=" ~ expression }

destruct_pair = { "let" ~ "(" ~ identifier ~ ("," ~ identifier) ~ ")" ~ (":" ~ ty)? ~ "=" ~ expression }

expression = { block_expression | pair | single_expression }
single_expression = {term}
block_expression = { "{" ~ (statement ~ ";")* ~ expression ~ "}" }
pair = {"(" ~ expression ~ "," ~ expression  ~ ")"}

unit_type         =  { "()" }
sum_type          =  { "Either<" ~ ty ~ "," ~ ty ~ ">" }
product_type      =  { "(" ~ ty ~ "," ~ ty ~ ")" }
option_type       =  { "Option<" ~ ty ~ ">" }
unsigned_type     =  { "u128" | "u256" | "u16" | "u32" | "u64" | "u1" | "u2" | "u4" | "u8" }
ty                =  { unit_type | sum_type | product_type | option_type | unsigned_type }

term = { func_call | constants | witness | identifier | "(" ~ expression ~ ")" }

jet = @{"jet_" ~ (ASCII_ALPHANUMERIC | "_")+}
builtin = @{"builtin_" ~ (ASCII_ALPHANUMERIC | "_")+}
asserts = _{ assertl | assertr}
assertl = @{"assertl"}
assertr = @{"assertr"}
witness = @{"wit_" ~ (ASCII_ALPHANUMERIC | "_")+}
reserved = _{ jet | witness | builtin | asserts }

constants = { unit | none | false_ | true_ | number }
unit = { "()" }
none = { "None" }
number = @{ hex_number| (ASCII_DIGIT)+}
false_ = { "False" }
true_ = { "True" }
hex_number = @{ "0x" ~ (HEX_DIGIT)+ }

// In built functions
func_call = { (jet | builtin) ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" | asserts ~ "(" ~ expression ~ ")" }
