WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }

program = {
    SOI ~
    (statement ~ ";")* ~
    EOI
}
statement = { assignment | witness_decl | func_call }
witness_decl = _{ "let" ~ witness}

identifier        = @{ !(reserved) ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
jet               = @{ "jet_" ~ (ASCII_ALPHANUMERIC | "_")+ }
builtin           = @{ "builtin_" ~ (ASCII_ALPHANUMERIC | "_")+ }
witness           = @{ "wit_" ~ (ASCII_ALPHANUMERIC | "_")+ }
reserved          = _{ jet | builtin | witness }

variable_pattern  =  { identifier }
ignore_pattern    =  { "_" }
product_pattern   =  { "(" ~ pattern ~ "," ~ pattern ~ ")" }
pattern           =  { variable_pattern | ignore_pattern | product_pattern }
assignment        =  { "let" ~ pattern ~ (":" ~ ty)? ~ "=" ~ expression }

unit_type         =  { "()" }
sum_type          =  { "Either<" ~ ty ~ "," ~ ty ~ ">" }
product_type      =  { "(" ~ ty ~ "," ~ ty ~ ")" }
option_type       =  { "Option<" ~ ty ~ ">" }
unsigned_type     =  { "u128" | "u256" | "u16" | "u32" | "u64" | "u1" | "u2" | "u4" | "u8" }
ty                =  { unit_type | sum_type | product_type | option_type | unsigned_type }

expression        =  { block_expression | single_expression }
block_expression  =  { "{" ~ (statement ~ ";")* ~ expression ~ "}" }
unit_expr         =  { "()" }
left_expr         =  { "Left(" ~ expression ~ ")" }
right_expr        =  { "Right(" ~ expression ~ ")" }
product_expr      =  { "(" ~ expression ~ "," ~ expression ~ ")" }
none_expr         =  { "None" }
some_expr         =  { "Some(" ~ expression ~ ")" }
jet_expr          =  { jet ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
unwrap_left_expr  =  { "unwrap_left(" ~ expression ~ ")" }
unwrap_right_expr =  { "unwrap_right(" ~ expression ~ ")" }
unwrap_expr       =  { "unwrap(" ~ expression ~ ")" }
func_call         =  { jet_expr | unwrap_left_expr | unwrap_right_expr | unwrap_expr }
unsigned_integer  =  { ASCII_DIGIT+ }
bit_string        =  { "0b" ~ ASCII_BIN_DIGIT+ }
byte_string       =  { "0x" ~ ASCII_HEX_DIGIT+ }
witness_expr      =  { witness }
variable_expr     =  { identifier }
single_expression =  { unit_expr | left_expr | right_expr | product_expr | none_expr | some_expr | func_call | bit_string | byte_string | unsigned_integer | witness_expr | variable_expr | "(" ~ expression ~ ")" }
