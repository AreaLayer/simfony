let a1: [bool; 1] = 1;
let b1: [bool; 2] = 1;
let c1: [bool; 4] = 1;
let d1: [bool; 8] = 1;
let e1: [bool; 16] = 1;
let f1: [bool; 32] = 1;
let g1: [bool; 64] = 1;
let h1: [bool; 128] = 000_000_000_000_000_000_000_000_000_000_000_000_001;
let i1: [bool; 256] = 0x0000000000000000000000000000000000000000000000000000000000000001;
let a2: u1 = 1;
let b2: u2 = 1;
let c2: u4 = 1;
let d2: u8 = 1;
let e2: u16 = 1;
let f2: u32 = 1;
let g2: u64 = 1;
let h2: u128 = 0x00000000000000000000000000000001;
let i2: u256 = 0x0000000000000000000000000000000000000000000000000000000000000001;
let a3: [bool; 1] = [true];
let b3: [bool; 2] = [false, true];
let c3: [bool; 4] = [false, false, false, true];
let d3: [u8; 1] = [1];
let e3: [u8; 2] = [0, 1];
let f3: [u8; 4] = [0, 0, 0, 1];
let g3: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 1];
let h3: [u8; 16] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
let i3: [u8; 32] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
jet_verify(jet_eq_1(a1, a2));
jet_verify(jet_eq_1(a1, a3));
jet_verify(jet_eq_8(d1, d2));
jet_verify(jet_eq_8(d1, d3));
jet_verify(jet_eq_16(e1, e2));
jet_verify(jet_eq_16(e1, e3));
jet_verify(jet_eq_32(f1, f2));
jet_verify(jet_eq_32(f1, f3));
jet_verify(jet_eq_64(g1, g2));
jet_verify(jet_eq_64(g1, g3));
jet_verify(jet_eq_256(i1, i2));
jet_verify(jet_eq_256(i1, i3));
let pad_b1: u8 = ((b1, b1), (b1, b1));
let pad_b2: u8 = ((b2, b2), (b2, b2));
let pad_b3: u8 = ((b3, b3), (b3, b3));
let pad_c1: u8 = (c1, c1);
let pad_c2: u8 = (c2, c2);
let pad_c3: u8 = (c3, c3);
let pad_h1: u256 = (h1, h1);
let pad_h2: u256 = (h2, h2);
let pad_h3: u256 = (h3, h3);
jet_verify(jet_eq_8(pad_b1, pad_b2));
jet_verify(jet_eq_8(pad_b1, pad_b3));
jet_verify(jet_eq_8(pad_c1, pad_c2));
jet_verify(jet_eq_8(pad_c1, pad_c3));
jet_verify(jet_eq_256(pad_h1, pad_h2));
jet_verify(jet_eq_256(pad_h1, pad_h3));
let j1: [bool; 3] = [false, false, true];
let j2: ((bool, bool), bool) = j1;
let k1: [bool; 5] = [false, false, false, false, true];
let k2: (((bool, bool), (bool, bool)), bool) = k1;
let [l, m, n]: [u32; 3] = [1, 2, 3];
jet_verify(jet_eq_32(1, l));
jet_verify(jet_eq_32(2, m));
jet_verify(jet_eq_32(3, n));
let empty: [u8; 0] = [];
let []: [u8; 0] = empty;
