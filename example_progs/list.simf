fn checked_add_32(a: u32, b: u32) -> u32 {
    let (carry, sum): (bool, u32) = jet::add_32(a, b);
    assert!(<u1>::into(jet::complement_1(<bool>::into(carry))));
    sum
}

fn main() {
    // Sum all list elements
    let sum: u32 = fold::<checked_add_32, 2>(list![1], 0);
    assert!(jet::eq_32(1, sum));

    let sum: u32 = fold::<checked_add_32, 4>(list![1, 2, 3], 0);
    assert!(jet::eq_32(6, sum));

    let sum: u32 = fold::<checked_add_32, 8>(list![1, 2, 3, 4, 5, 6, 7], 0);
    assert!(jet::eq_32(28, sum));

    // List values may be shorter than their maximum length
    // The iteration stops at the last element
    let sum: u32 = fold::<checked_add_32, 8>(list![1], 0);
    assert!(jet::eq_32(1, sum));
}
