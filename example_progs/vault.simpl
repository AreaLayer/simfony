/*
 * This program emulates OP_VAULT.
 *
 * Terminology:
 *
 * vault output = spent UTXO
 * trigger output = 0-th output of spending transaction
 * withdraw output = output that spends trigger output
 * (vault|trigger) taptree = taptree of (vault|trigger) output
 * trigger leaf = tapleaf in vault taptree that contains present script
 * withdraw leaf = tapleaf in trigger taptree that contains withdraw script
 * recover leaf = tapleaf in (vault|trigger) taptree that contains recover script
 *
 * Spending conditions:
 *
 * The trigger taptree must be equal to the vault taptree,
 * except that the trigger leaf is replaced with the (hardcoded) withdraw leaf.
 *
 * The trigger output must be greater equal in value than the vault output.
 *
 * Notes:
 *
 * A recover leaf can be added to the vault output.
 * The spending conditions enforce that the same leaf must exist in the trigger output.
 *
 * We omitted revaulting.
 */

/* Cmr of script that enforces some timelock and some withdrawal output script */
let withdraw_script_cmr: u256 = 0x126a5c6e2d95fdf8fa0ac2927803de62fbca645527f514e523ac1d3d39afcc68;
let expected_withdraw_leaf = jet_build_tapleaf_simplicity(wit_withdraw_cmr);

/* Vault tappath + expected trigger cmr = expected trigger root */
/* Expected trigger taptree = vault taptree with expected trigger script at 0-leaf */
/* All non-zero tap leafs of vault taptree are retained in trigger taptree */
let expected_trigger_root = jet_taproot(0, expected_trigger_leaf)?;

/* Trigger output key = vault internal key tweaked by trigger root */
let vault_internal_key = jet_internal_key;
let expected_trigger_output_key = jet_tweak_key(vault_internal_key, expected_trigger_root);

/* Trigger script = <01> <trigger output key> */
/* FIXME We need to hash trigger script as 33 bytes */
/* Hashing 1 byte and then 32 bytes yields different result */
let sha2_ctx = jet_sha_256_ctx_8_init();
let sha2_ctx = jet_sha_256_ctx_8_add_1(sha2_ctx, 0x01);
let sha2_ctx = jet_sha_256_ctx_8_add_32(sha2_ctx, expected_trigger_output_key);
let expected_trigger_script_hash = jet_sha_256_ctx_8_finalize(sha2_ctx);

/* Enforce that trigger taptree looks as expected */
let trigger_script_hash = jet_output_script_hash(0)?;
jet_verify(jet_eq_256(trigger_script_hash, expected_trigger_script_hash));

/* Enforce that all vault satoshis go into trigger output */
let (_, vault_amount) = jet_current_amount;
let (_, trigger_amount) = jet_output_amount(0)?;
jet_verify(jet_amount_lt(vault_amount, trigger_amount));
