/*
 * This program emulates OP_TXHASH_VERIFY.
 *
 * The program is a showcase of what could be possible.
 * It does not compile because of missing syntax.
 */

let sha2_ctx = jet_sha_256_ctx_8_init();

/* Transaction field selection */
let wit_version: bool;
let wit_locktime: bool;
let wit_current_index: bool;
let wit_current_control_block: bool;
let wit_inputs: bool;
let wit_outputs: bool;
// TODO Support recursively hashing TxFieldSector via control bit

let sha2_ctx = match wit_version {
    False => sha2_ctx,
    True => jet_sha_256_ctx_8_add_4(sha2_ctx, jet_version()),
};
let sha2_ctx = match wit_locktime {
    False => sha2_ctx,
    True => jet_sha_256_ctx_8_add_4(sha2_ctx, jet_lock_time()),
};
let sha2_ctx = match wit_current_index {
    False => sha2_ctx,
    True => jet_sha_256_ctx_8_add_4(sha2_ctx, jet_current_index()),
};
let sha2_ctx = match wit_current_control_block {
    False => sha2_ctx,
    True => jet_sha_256_ctx_8_add_32(sha2_ctx, jet_tap_env_hash()),
};

/* Input index + field selection */
match wit_inputs {
    True => {
        let wit_spent_outpoints: bool;
        let wit_input_sequences: bool;
        let wit_input_script_sigs: bool;
        let wit_input_script_pubkeys: bool;
        let wit_spent_amounts: bool;
        let wit_input_annexes: bool;

        /* TODO Support relative indices */
        /* TODO Support leading mode */

        /* List of absolute input indices */
        let wit_input_indices: [u32; N];

        for index in wit_input_indices {
            let sha2_ctx = match wit_spent_outpoints {
                False => sha2_ctx,
                // ? operator unwraps Some(Outpoint) and fails upon None
                True => jet_outpoint_hash(sha2_ctx, jet_input_prev_outpoint(index)?),
            };
            let sha2_ctx = match wit_input_sequences {
                False => sha2_ctx,
                True => jet_sha_256_ctx_8_add_4(sha2_ctx, jet_input_sequence(index)?),
            };
            let sha2_ctx = match wit_input_script_sigs {
                False => sha2_ctx,
                // FIXME Missing `jet_input_script_sig_hash`
                True => jet_sha_256_ctx_8_add_32(sha2_ctx, jet_input_script_sig_hash(index)?),
            };
            let sha2_ctx = match wit_input_script_pubkeys {
                False => sha2_ctx,
                True => jet_sha_256_ctx_8_add_32(sha2_ctx, jet_input_script_hash(index)?),
            };
            let sha2_ctx = match wit_input_spent_amounts {
                False => sha2_ctx,
                True => jet_asset_amount_hash(sha2_ctx, jet_input_amount(index)?),
            };
            let sha2_ctx = match wit_input_annexes {
                False => sha2_ctx,
                // Fail if input does not exist
                // Skip input if it has no annex
                True => match jet_input_annex_hash(index)? {
                    None => sha2_ctx,
                    Some(hash) => jet_sha_256_ctx_8_add_32(sha2_ctx, hash),
                },
            };
        }
    },
    False => {},
}

/* Output index + field selection */
match wit_output {
    True => {
        let wit_output_script_pubkeys: bool;
        let wit_output_amounts: bool;

        /* TODO Support relative indices */
        /* TODO Support leading mode */

        /* List of absolute output indices */
        let wit_output_indices: [u32; N];

        for index in wit_output_indices {
            let sha2_ctx = match wit_output_script_pubkeys {
                False => sha2_ctx,
                True => jet_sha_256_ctx_8_add_32(sha2_ctx, jet_output_script_hash(index)?),
            };
            let sha2_ctx = match wit_output_amounts {
                False => sha2_ctx,
                True => jet_asset_amount_hash(sha2_ctx, jet_input_amount(index)?),
            };
        }
    },
    False => {},
}

let expected_hash: u258 = 0xf57f15937068d3054a4f437ac95cba65bae3c1b0529a84caa29d40200bf49c85;
let hash = jet_sha_256_ctx_8_finalize(sha2_ctx);
jet_verify(jet_eq_256(hash, hash_expected));
