/*
 * This program shows all details of computing SIGHASH_ALL.
 *
 * All hashes are computed twice:
 * 1) Combining hashes as by the definition of the hash
 * 2) Using the dedicated jet
 *
 * The program verifies that the manually computed value equals
 * the value that was returned from the dedicated jet.
 */

// jet_sig_all_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_genesis_block_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_genesis_block_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_tx_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_tap_env_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_4(ctx, jet_current_index());
let sig_all_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256= jet_sig_all_hash();
jet_verify(jet_eq_256(sig_all_hash, expected));

// jet_tx_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_4(ctx, jet_version());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_4(ctx, jet_lock_time());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_inputs_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_outputs_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_issuances_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_output_surjection_proofs_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_utxos_hash());
let tx_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_tx_hash();
jet_verify(jet_eq_256(tx_hash, expected));

// jet_inputs_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_outpoints_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_sequences_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_annexes_hash());
let inputs_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_inputs_hash();
jet_verify(jet_eq_256(inputs_hash, expected));

// jet_outputs_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_output_amounts_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_output_nonces_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_output_scripts_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_output_range_proofs_hash());
let outputs_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_outputs_hash();
jet_verify(jet_eq_256(outputs_hash, expected));

// jet_issuances_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_issuance_asset_amounts_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_issuance_token_amounts_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_issuance_range_proofs_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_issuance_blinding_entropy_hash());
let issuances_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_issuances_hash();
jet_verify(jet_eq_256(issuances_hash, expected));

// jet_input_utxos_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_amounts_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_input_scripts_hash());
let input_utxos_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_input_utxos_hash();
jet_verify(jet_eq_256(input_utxos_hash, expected));

// jet_tap_env_hash
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_init();
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_tapleaf_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_tappath_hash());
let ctx: (List<u8, 64>, (u64, u256)) = jet_sha_256_ctx_8_add_32(ctx, jet_internal_key());
let tap_env_hash: u256 = jet_sha_256_ctx_8_finalize(ctx);
let expected: u256 = jet_tap_env_hash();
jet_verify(jet_eq_256(tap_env_hash, expected));
