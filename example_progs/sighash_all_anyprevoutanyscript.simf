/*
 * This program verifies a Schnorr signature based on
 * SIGHASH_ALL | SIGHASH_ANYPREVOUTANYSCRIPT.
 */

let ctx: Ctx8 = jet_sha_256_ctx_8_init();
// Blockchain
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_genesis_block_hash());
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_genesis_block_hash());
// Transaction
let ctx: Ctx8 = jet_sha_256_ctx_8_add_4(ctx, jet_version());
let ctx: Ctx8 = jet_sha_256_ctx_8_add_4(ctx, jet_lock_time());
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_tap_env_hash());
// Current input without outpoint, amounts or scriptPubKey
let ctx: Ctx8 = jet_sha_256_ctx_8_add_4(ctx, jet_current_sequence());
let ctx: Ctx8 = jet_annex_hash(ctx, jet_current_annex_hash());
// All outputs
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_outputs_hash());
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_issuances_hash());
let ctx: Ctx8 = jet_sha_256_ctx_8_add_32(ctx, jet_output_surjection_proofs_hash());
// No current index
// Message
let msg: u256 = jet_sha_256_ctx_8_finalize(ctx);

let pk: u256 = 0xf9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9;
let sig: [u8; 64] = [0xc9, 0x39, 0xe3, 0x23, 0x44, 0x64, 0x2e, 0x3c, 0x22, 0x8b, 0x01, 0x62, 0x04, 0x18, 0x24, 0xaf, 0xe1, 0x94, 0x29, 0x74, 0x77, 0x18, 0x82, 0x55, 0xd2, 0x63, 0x79, 0x08, 0xa0, 0xd0, 0x0d, 0x1f, 0xdf, 0x59, 0x21, 0x4a, 0x30, 0x4d, 0xdf, 0x18, 0x0b, 0x1a, 0x07, 0x01, 0x9a, 0x60, 0xd8, 0x08, 0xd1, 0x81, 0x70, 0xfb, 0x77, 0xfd, 0x3b, 0x00, 0xec, 0xa7, 0x66, 0x67, 0xd7, 0xaa, 0x26, 0x8e];
jet_bip_0340_verify(pk, msg, sig);
